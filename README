SEB - SliTaz Embedded OS
================================================================================

Back to the root with this cmdline tool to build realy small SliTaz text mode 
system for hacking, learning and developing small Linux operating system.

Seb builder will init a minimal set of files that you can customise at your
needs, install Busybox and create a compressed rootfs that can boot in frugal
mode as well as an ISO image to use with Qemu. Other boot methods can be used
with a bit a knowledge (web boot). The system is built in a single rootfs
folder wich can be used as chroot environment.

SliTaz embedded provide all basic Linux command, a powerfull web server with
CGI support and a set of home made tools for administration and debuging. Seb
is easy too use, follow the KISS principle. Please use SliTaz Bugs System
for any bug report. There is no wifi support and it's not bug :-)

If you want to learn more about the basics of a Linux operating system you
can have a look to SliTaz Scratchbook wich explain step by step the creation of
SliTaz back in 2006. This tool was published in 2017, ten years after the first
cooking public release :-)

Seb system will fit into a ~4MB ISO image for the realy base system, up to 10Mb
or more, but without X. If you are seraching for an even more small SliTaz 
version, please have a look to Tiny SliTaz: http://tiny.slitaz.org


Goals and features
-------------------------------------------------------------------------------

  * Built fast and light servers or mediabox
  * Nice way to learn about creating Linux OS
  * Built small rescue systems in frugal mode
  * Fun playground for hackers and kids


Quickstart Guide:
--------------------------------------------------------------------------------
Build a distro in a few commands. Install seb or run it from source tree:

  # mkdir seb-os; cd seb-os
  # seb init

You can now modify and add extra files in the embfs/ folder. Let's include
sqlite package and build the ISO image:

  # seb -p sqlite --add
  # seb build

If you want to test the OS, you can install Qemu emulator and run:

  # seb -e

To get a list of commands, just run seb without arguments: $ seb


Build process & environment
--------------------------------------------------------------------------------
Seb is not compliling any tools, it will use SliTaz standard executable and
libraries - Seb OS is created on top of SliTaz. Packages installed in seb must
be on the build host, this is the case for the full basic sysem.

Seb will build the custom operating system into the current directory or it
will read a build.conf file to know the path to the work/build folder. Seb will
use these directories to work:

  * rootfs/     The root filsysytem of the compressed operationg system
  * rootiso/    Root of the ISO image with rootfs.gz, bootloader and kernel
  * sebfs/      Custom files overwritting file into the rootfs
  * sebpkgs/    The packages to install into the distro


Linux kernel and modules
-------------------------------------------------------------------------------
By default seb will use the running kernel and a custom one can be used with
the option --linux= or with a build.conf file. There is no kernel modules
support in seb, it would mean having kmod, liblzma, zlib and a bunch of files
in /lib/modules. This is not what we want in a small customized OS. To be fast
at boot we rommended you to build your own linux kernel with SliTaz utils or
from source like expained in the Scratchbook with modules built-in the kernel.

To use a custom Linux kernel with seb builder:

  # seb build --linux=/path/to/bzImage

To cook a custom kernel with SliTaz cookutils:

  # cooklinux usage
  
After the kernel is built, you will have a SliTaz packages and all generated
files in /home/slitaz/src/linux-XXX. The kernel compressed image (bzImage) can
be found inthe arch/folder. Example for linux 4.9.10 build for X86 platform:

/home/slitaz/src/linux-4.9.10/arch/x86/boot/bzImage


Frugal install
--------------------------------------------------------------------------------
A frugal installation let you boot your seb system without any installation and
with the all system running in memory. Basicaly you need to have the rootfs.gz
and the kernel in the /boot tree and a entry in Grub configuration file. SliTaz
provide a nifty little tools for frugal install:

  # frugal path/to/image.iso

Grub entry will need a rdinit=/sbin/init on the kernel line. Here is an example:

# Seb OS Frugal on sdb1
title SliTaz Embedded OS (frugal)
root (hd0,0)
kernel /boot/frugal/bzImage root=/dev/null rdinit=/sbin/init loglevel=5
initrd /boot/frugal/rootfs.gz


Virtual disk
--------------------------------------------------------------------------------
A virtual disk let you have a persitstant filesystem when using Qemu or booting,
in frugal mode (recommended). It is useful when developping/debugging scripts 
that runs into a seb-os or to host web server virtual hosts. Create, mount or
umount disk:

  # seb disk


Source code and developers guidelines
--------------------------------------------------------------------------------
Note even need to say that this tool MUST stay simple, fast, elegant and fun.
We dont want a super tool for complex system building, we have tazlito and Tiny
SliTaz for that. Seb is as close as possible of SliTaz first build, seb is
also a learning tool. Seb let you build sandbox os from scratch and rock solid 
hardware specific servers.

  * examples/       Various fs and scripts examples
  * initfs/         Initial files used to create the system
  * seb             SliTaz Embedded operation system builder
  * libseb.sh       Seb shared functions install on host and in seb OS
  * tools/          Various tools included or used to build an OS
  * packages/       SliTaz Embedded packages database

We dont want to much automation, let people create ther own OS in there own way
but provide some usefull function to help :-)
  

Gettext i18n
--------------------------------------------------------------------------------
No i18n with gettext in seb tools since seb distro dont include gettext-base.


================================================================================
